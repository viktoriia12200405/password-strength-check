{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { BehaviorSubject, map } from 'rxjs';\nimport { PasswordStrengthEnum } from 'src/app/enums/password-strength-enum';\nconst weakRegex = /^([a-zA-Z]+|[!@#$%^&*]+|[0-9]+)$/;\nconst mediumRegex = /^(?=.*[a-zA-Z])(?=.*[!@#$%^&*])|(?=.*[a-zA-Z])(?=.*[0-9])|(?=.*[0-9])(?=.*[!@#$%^&*])+.*$/;\nconst strongRegex = /^(?=.*[a-zA-Z])(?=.*[!@#$%^&*])(?=.*[0-9])+.*$/;\nexport let PasswordComponent = class PasswordComponent {\n  constructor() {\n    this.inputType$ = new BehaviorSubject('password');\n    this.buttonText$ = this.inputType$.pipe(map(type => type === 'password' ? 'Show' : 'Hide'));\n    this.sections$ = Array.from({\n      length: sectionsLength\n    }, () => new BehaviorSubject(PasswordStrengthEnum.default));\n  }\n  onPasswordChange(password) {\n    const strength = this.calculatePasswordStrength(password);\n    this.sections$.forEach(x => {\n      x.next(PasswordStrengthEnum.default);\n    });\n    switch (strength) {\n      case PasswordStrengthEnum.short:\n        this.sections$.forEach(x => {\n          x.next(PasswordStrengthEnum.weak);\n        });\n        break;\n      case PasswordStrengthEnum.weak:\n        this.sections$[0].next(PasswordStrengthEnum.weak);\n        break;\n      case PasswordStrengthEnum.medium:\n        this.sections$[0].next(PasswordStrengthEnum.medium);\n        this.sections$[1].next(PasswordStrengthEnum.medium);\n        break;\n      case PasswordStrengthEnum.strong:\n        this.sections$.forEach(x => {\n          x.next(PasswordStrengthEnum.strong);\n        });\n        break;\n      default:\n        break;\n    }\n  }\n  calculatePasswordStrength(password) {\n    if (password.length === 0) return PasswordStrengthEnum.default;\n    if (password.length < 8) return PasswordStrengthEnum.short;\n    if (weakRegex.test(password)) return PasswordStrengthEnum.weak;\n    if (mediumRegex.test(password)) return PasswordStrengthEnum.medium;\n    if (strongRegex.test(password)) return PasswordStrengthEnum.strong;\n    return PasswordStrengthEnum.default;\n  }\n  toggleInputType() {\n    const currentType = this.inputType$.getValue();\n    const newType = currentType === 'password' ? 'text' : 'password';\n    this.inputType$.next(newType);\n  }\n};\nPasswordComponent = __decorate([Component({\n  selector: 'app-password',\n  templateUrl: './password.component.html',\n  styleUrls: ['./password.component.scss']\n})], PasswordComponent);","map":{"version":3,"names":["Component","BehaviorSubject","map","PasswordStrengthEnum","weakRegex","mediumRegex","strongRegex","PasswordComponent","constructor","inputType$","buttonText$","pipe","type","sections$","Array","from","length","sectionsLength","default","onPasswordChange","password","strength","calculatePasswordStrength","forEach","x","next","short","weak","medium","strong","test","toggleInputType","currentType","getValue","newType","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\projects\\PasswordCheck\\src\\app\\components\\password\\password.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { BehaviorSubject, map } from 'rxjs';\nimport { PasswordStrengthEnum } from 'src/app/enums/password-strength-enum';\n\nconst weakRegex = /^([a-zA-Z]+|[!@#$%^&*]+|[0-9]+)$/;\nconst mediumRegex = /^(?=.*[a-zA-Z])(?=.*[!@#$%^&*])|(?=.*[a-zA-Z])(?=.*[0-9])|(?=.*[0-9])(?=.*[!@#$%^&*])+.*$/;\nconst strongRegex = /^(?=.*[a-zA-Z])(?=.*[!@#$%^&*])(?=.*[0-9])+.*$/;\n\n@Component({\n    selector: 'app-password',\n    templateUrl: './password.component.html',\n    styleUrls: ['./password.component.scss']\n})\n\nexport class PasswordComponent {\n  \n    inputType$ = new BehaviorSubject<string>('password');\n    buttonText$ = this.inputType$.pipe(map(type => (type === 'password' ? 'Show' : 'Hide')));\n    sections$: BehaviorSubject<PasswordStrengthEnum>[] = Array.from({ length: sectionsLength }, () => new BehaviorSubject<PasswordStrengthEnum>(PasswordStrengthEnum.default));\n\n    onPasswordChange(password: string) {\n        const strength = this.calculatePasswordStrength(password);\n        this.sections$.forEach(x => {\n            x.next(PasswordStrengthEnum.default);\n        });\n\n        switch(strength) {\n            case PasswordStrengthEnum.short:\n                this.sections$.forEach(x => {\n                    x.next(PasswordStrengthEnum.weak);\n                });\n                break;\n            case PasswordStrengthEnum.weak:\n                this.sections$[0].next(PasswordStrengthEnum.weak);\n                break;\n            case PasswordStrengthEnum.medium:\n                this.sections$[0].next(PasswordStrengthEnum.medium);\n                this.sections$[1].next(PasswordStrengthEnum.medium);\n                break;\n            case PasswordStrengthEnum.strong:\n                this.sections$.forEach(x => {\n                    x.next(PasswordStrengthEnum.strong);\n                });\n                break;\n            default:\n                break;\n        }\n    }\n    \n    calculatePasswordStrength(password: string): PasswordStrengthEnum {\n        if (password.length === 0)\n            return PasswordStrengthEnum.default;\n\n        if (password.length < 8)\n            return PasswordStrengthEnum.short;\n\n        if (weakRegex.test(password))\n            return PasswordStrengthEnum.weak;\n        \n        if (mediumRegex.test(password))\n            return PasswordStrengthEnum.medium;\n\n        if (strongRegex.test(password))\n            return PasswordStrengthEnum.strong;\n\n        return PasswordStrengthEnum.default;\n    }\n    \n\n    toggleInputType():void {\n        const currentType = this.inputType$.getValue();\n        const newType = currentType === 'password' ? 'text' : 'password';\n        this.inputType$.next(newType);\n    }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}