{"ast":null,"code":"import { BehaviorSubject, map } from 'rxjs';\nimport { PasswordStrengthEnum } from 'src/app/enums/password-strength-enum';\nconst weakRegex = /^([a-zA-Z]+|[!@#$%^&*]+|[0-9]+)$/;\nconst mediumRegex = /^(?=.*[a-zA-Z])(?=.*[!@#$%^&*])|(?=.*[a-zA-Z])(?=.*[0-9])|(?=.*[0-9])(?=.*[!@#$%^&*])+.*$/;\nconst strongRegex = /^(?=.*[a-zA-Z])(?=.*[!@#$%^&*])(?=.*[0-9])+.*$/;\nexport class PasswordComponent {\n  constructor() {\n    this.inputType$ = new BehaviorSubject('password');\n    this.buttonText$ = this.inputType$.pipe(map(type => type === 'password' ? 'Show' : 'Hide'));\n    this.sections$ = [new BehaviorSubject(PasswordStrengthEnum.default), new BehaviorSubject(PasswordStrengthEnum.default), new BehaviorSubject(PasswordStrengthEnum.default)];\n  }\n  onPasswordChange(password) {\n    const strength = this.calculatePasswordStrength(password);\n    switch (strength) {\n      case PasswordStrengthEnum.short:\n        this.sections$.forEach(element => {});\n        break;\n      case PasswordStrengthEnum.weak:\n        break;\n      case PasswordStrengthEnum.medium:\n        break;\n      case PasswordStrengthEnum.strong:\n        break;\n      default:\n        break;\n    }\n  }\n  calculatePasswordStrength(password) {\n    if (password.length === 0) return PasswordStrengthEnum.default;\n    if (password.length < 8) return PasswordStrengthEnum.short;\n    if (weakRegex.test(password)) return PasswordStrengthEnum.weak;\n    if (mediumRegex.test(password)) return PasswordStrengthEnum.medium;\n    if (strongRegex.test(password)) return PasswordStrengthEnum.strong;\n    return PasswordStrengthEnum.default;\n  }\n  toggleInputType() {\n    const currentType = this.inputType$.getValue();\n    const newType = currentType === 'password' ? 'text' : 'password';\n    this.inputType$.next(newType);\n  }\n}","map":{"version":3,"names":["BehaviorSubject","map","PasswordStrengthEnum","weakRegex","mediumRegex","strongRegex","PasswordComponent","constructor","inputType$","buttonText$","pipe","type","sections$","default","onPasswordChange","password","strength","calculatePasswordStrength","short","forEach","element","weak","medium","strong","length","test","toggleInputType","currentType","getValue","newType","next"],"sources":["C:\\projects\\PasswordCheck\\src\\app\\components\\password\\password.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { BehaviorSubject, map } from 'rxjs';\nimport { PasswordStrengthEnum } from 'src/app/enums/password-strength-enum';\n\n@Component({\n    selector: 'app-password',\n    templateUrl: './password.component.html',\n    styleUrls: ['./password.component.scss']\n})\n\nconst weakRegex = /^([a-zA-Z]+|[!@#$%^&*]+|[0-9]+)$/;\nconst mediumRegex = /^(?=.*[a-zA-Z])(?=.*[!@#$%^&*])|(?=.*[a-zA-Z])(?=.*[0-9])|(?=.*[0-9])(?=.*[!@#$%^&*])+.*$/;\nconst strongRegex = /^(?=.*[a-zA-Z])(?=.*[!@#$%^&*])(?=.*[0-9])+.*$/;\n\nexport class PasswordComponent {\n\n    \n    inputType$ = new BehaviorSubject<string>('password');\n    buttonText$ = this.inputType$.pipe(map(type => (type === 'password' ? 'Show' : 'Hide')));\n    sections$: BehaviorSubject<PasswordStrengthEnum>[] = [\n        new BehaviorSubject<PasswordStrengthEnum>(PasswordStrengthEnum.default),\n        new BehaviorSubject<PasswordStrengthEnum>(PasswordStrengthEnum.default),\n        new BehaviorSubject<PasswordStrengthEnum>(PasswordStrengthEnum.default),\n    ];\n\n    onPasswordChange(password: string) {\n        const strength = this.calculatePasswordStrength(password);\n        switch(strength) {\n            case PasswordStrengthEnum.short:\n                this.sections$.forEach(element => {\n                    \n                });\n                break;\n            case PasswordStrengthEnum.weak:\n                break;\n            case PasswordStrengthEnum.medium:\n                break;\n            case PasswordStrengthEnum.strong:\n                break;\n            default:\n                break;\n        }\n    }\n    \n    calculatePasswordStrength(password: string): PasswordStrengthEnum {\n        if (password.length === 0)\n            return PasswordStrengthEnum.default;\n\n        if (password.length < 8)\n            return PasswordStrengthEnum.short;\n\n        if (weakRegex.test(password))\n            return PasswordStrengthEnum.weak;\n        \n        if (mediumRegex.test(password))\n            return PasswordStrengthEnum.medium;\n\n        if (strongRegex.test(password))\n            return PasswordStrengthEnum.strong;\n\n        return PasswordStrengthEnum.default;\n    }\n    \n\n    toggleInputType():void {\n        const currentType = this.inputType$.getValue();\n        const newType = currentType === 'password' ? 'text' : 'password';\n        this.inputType$.next(newType);\n    }\n}"],"mappings":"AACA,SAASA,eAAe,EAAEC,GAAG,QAAQ,MAAM;AAC3C,SAASC,oBAAoB,QAAQ,sCAAsC;AAQ3E,MAAMC,SAAS,GAAG,kCAAkC;AACpD,MAAMC,WAAW,GAAG,2FAA2F;AAC/G,MAAMC,WAAW,GAAG,gDAAgD;AAEpE,OAAM,MAAOC,iBAAiB;EAA9BC,YAAA;IAGI,KAAAC,UAAU,GAAG,IAAIR,eAAe,CAAS,UAAU,CAAC;IACpD,KAAAS,WAAW,GAAG,IAAI,CAACD,UAAU,CAACE,IAAI,CAACT,GAAG,CAACU,IAAI,IAAKA,IAAI,KAAK,UAAU,GAAG,MAAM,GAAG,MAAO,CAAC,CAAC;IACxF,KAAAC,SAAS,GAA4C,CACjD,IAAIZ,eAAe,CAAuBE,oBAAoB,CAACW,OAAO,CAAC,EACvE,IAAIb,eAAe,CAAuBE,oBAAoB,CAACW,OAAO,CAAC,EACvE,IAAIb,eAAe,CAAuBE,oBAAoB,CAACW,OAAO,CAAC,CAC1E;EA8CL;EA5CIC,gBAAgBA,CAACC,QAAgB;IAC7B,MAAMC,QAAQ,GAAG,IAAI,CAACC,yBAAyB,CAACF,QAAQ,CAAC;IACzD,QAAOC,QAAQ;MACX,KAAKd,oBAAoB,CAACgB,KAAK;QAC3B,IAAI,CAACN,SAAS,CAACO,OAAO,CAACC,OAAO,IAAG,CAEjC,CAAC,CAAC;QACF;MACJ,KAAKlB,oBAAoB,CAACmB,IAAI;QAC1B;MACJ,KAAKnB,oBAAoB,CAACoB,MAAM;QAC5B;MACJ,KAAKpB,oBAAoB,CAACqB,MAAM;QAC5B;MACJ;QACI;;EAEZ;EAEAN,yBAAyBA,CAACF,QAAgB;IACtC,IAAIA,QAAQ,CAACS,MAAM,KAAK,CAAC,EACrB,OAAOtB,oBAAoB,CAACW,OAAO;IAEvC,IAAIE,QAAQ,CAACS,MAAM,GAAG,CAAC,EACnB,OAAOtB,oBAAoB,CAACgB,KAAK;IAErC,IAAIf,SAAS,CAACsB,IAAI,CAACV,QAAQ,CAAC,EACxB,OAAOb,oBAAoB,CAACmB,IAAI;IAEpC,IAAIjB,WAAW,CAACqB,IAAI,CAACV,QAAQ,CAAC,EAC1B,OAAOb,oBAAoB,CAACoB,MAAM;IAEtC,IAAIjB,WAAW,CAACoB,IAAI,CAACV,QAAQ,CAAC,EAC1B,OAAOb,oBAAoB,CAACqB,MAAM;IAEtC,OAAOrB,oBAAoB,CAACW,OAAO;EACvC;EAGAa,eAAeA,CAAA;IACX,MAAMC,WAAW,GAAG,IAAI,CAACnB,UAAU,CAACoB,QAAQ,EAAE;IAC9C,MAAMC,OAAO,GAAGF,WAAW,KAAK,UAAU,GAAG,MAAM,GAAG,UAAU;IAChE,IAAI,CAACnB,UAAU,CAACsB,IAAI,CAACD,OAAO,CAAC;EACjC"},"metadata":{},"sourceType":"module","externalDependencies":[]}